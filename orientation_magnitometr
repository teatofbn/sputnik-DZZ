import math
 
time_step = 0.1		# Временной шаг работы алгоритма, с
omega_goal = 0.0 	# Целевая угловая скорость спутника, град/с. Для режима стабилизации равна 0.0.
alpha_goal = 0		# Целевой угол поворота
mtr_max_speed = 5000 	# Максимально допустимая скорость маховика, об/мин
mtr_num = 1		# Номер маховика
hyr_num = 1		# Номер ДУС
mag_num = 1		# Номер магнитометра
 
 
errora = 0           	# Ошибка по углу
Pa = 0         		# Воздействие пропорционального звена
Da = 0         		# Воздействие дифференциального звена
Ia = 0         		# Воздействие интегрального звена
Kpa = 200		# Пропорциональный коэфициент ошибки по углу
Kda = 0.02           	# Дифференциальный коэффициент
Kia = 0.5            	# Интегральный коэффициент
lastErrora = 0       	# Прошлая ошибка по углу
Integratora = 0      	# Интеграл (сумма всех ошибок по углу)
PID_alpha = 0 		# Величина управляющего воздействия
Integrator_maxa = 10	# Ограничение максимального значения интергатора
Integrator_mina = -10	# Ограничение минимального значения интергатора
 
error = 0          	# Ошибка по угловой скорости
P = 0         		# Воздействие пропорционального звена
D = 0         		# Воздействие дифференциального звена
I = 0         		# Воздействие интегрального звена
Kp = 200            	# Пропорциональный коэффициент
Kd = 0.02           	# Дифференциальный коэффициент
Ki = 0.5            	# Интегральный коэффициент
lastError = 0       	# Прошлая ошибка по угловой скорости
Integrator = 0      	# Интеграл (сумма всех ошибок по угловой скорости)
PID_omega = 0       	# Величина управляющего воздействия
Integrator_max = 10  	# Ограничение максимального значения интергатора
Integrator_min = -10 	# Ограничение минимального значения интергатора
 
# Функция mag_calibrated вносит поправки в показания магнитометра с учетом калибровочных коэффициентов
def mag_calibrated(magx,magy,magz):
	magx_cal = 1.451626*(magx + 47.687257) + 0.036309*(magy + -1468.312497) + 0.008968*(magz + 48.449050)
	magy_cal = 0.036309*(magx + 47.687257) + 0.408031*(magy + -1468.312497) + 0.074774*(magz + 48.449050)
	magz_cal = 0.008968*(magx + 47.687257) + 0.074774*(magy + -1468.312497) + 1.429262*(magz + 48.449050)
	return magx_cal, magy_cal, magz_cal
 
# Функции для определение новой скорости маховика.
# Новая скорость маховика складывается из
# текущей скорости маховика mtr_speed и приращения скорости PID
# Приращение скорости получено путем сложения трех коэффициентов
# P - пропорциональный коэффициент регулятора
# I - интегральный коэффициент регулятора
# D - дифференциальный коэффициент регулятора
# Integrator накапливает суммарную ошибку
# Сатуратор ограничивает максимальную величину суммарной ошибки
# mtr_speed - текущая угловая скорость маховика, об/мин
# omega - текущая угловая скорость спутника, град/с
# omega_goal - целевая угловая скорость спутника, град/с
# mtr_new_speed - требуемая угловая скорость маховика, об/мин
def motor_new_speed_PD(mtr_speed, alpha, alpha_goal, omega, omega_goal):
	global Integrator
	global lastError
	global Integratora
	global lastErrora	
 
	error = omega - omega_goal           		# Вычисление ошибки
	P = Kp * error                       		# Вычисление воздействия пропорционального звена
	D = Kd * (error - lastError) / time_step	# Вычисление воздействия дифференциального звена
	lastError = error                    		# Запоминаем ошибку
	Integrator = Integrator + error * time_step # Накапливаем суммарную ошибку
	if Integrator > Integrator_max:         	# Сатурация (Ограничиваем максимальное значение накапливаемой ошибки)
		Integrator = Integrator_max
	elif Integrator < Integrator_min:
		Integrator = Integrator_min
	I = Integrator * Ki             # Вычисление воздействия интегрального звена
	PID_omega = P + I + D     		# Вычисление суммарного управляющего воздействия
 
	errora = alpha - alpha_goal           		# Вычисление ошибки
	Pa = Kpa * errora                       		# Вычисление воздействия пропорционального звена
	Da = Kda * (errora - lastErrora) / time_step	# Вычисление воздействия дифференциального звена
	lastErrora = errora                    		# Запоминаем ошибку
	Integratora = Integratora + errora * time_step # Накапливаем суммарную ошибку
	if Integratora > Integrator_maxa:         	# Сатурация (Ограничиваем максимальное значение накапливаемой ошибки)
		Integratora = Integrator_maxa
	elif Integratora < Integrator_mina:
		Integratora = Integrator_mina
	Ia = Integratora * Kia             # Вычисление воздействия интегрального звена
	PID_alpha = Pa + Ia + Da     		# Вычисление суммарного управляющего воздействия	
 
	mtr_new_speed = int(mtr_speed + PID_omega + PID_alpha)
	if mtr_new_speed > mtr_max_speed:
		mtr_new_speed = mtr_max_speed
	elif mtr_new_speed < -mtr_max_speed:
		mtr_new_speed = -mtr_max_speed
	print "P= ", P, "I= ", I, "D= ", D, "PID_omega= ", PID_omega, "PID_alpha=", PID_alpha, "mtr_new_speed= ", mtr_new_speed  
	print "Pa= ", Pa, "Ia= ", Ia, "Da= ", Da, "PID_alpha=", PID_alpha
	return mtr_new_speed
 
 
# Функция включает все приборы,
# которые будут использоваться в основной программе.
def initialize_all(): # Функция инициализации всех систем
	print "Enable motor №", mtr_num 
	motor_turn_on(mtr_num)
	sleep(1)
	print "Enable angular velocity sensor №", hyr_num 
	hyro_turn_on(hyr_num) # Включаем ДУС
	sleep(1)
	print "Enable magnetometer", mag_num
	magnetometer_turn_on(mag_num)
	sleep(1)
 
def switch_off_all(): # Функция выключения всех систем
	print "Finishing..."
	print "Disable angular velocity sensor №", hyr_num
	hyro_turn_off(hyr_num)   # Выключаем ДУС
	print "Disable magnetometer", mag_num
	magnetometer_turn_off(mag_num)
	motor_set_speed(mtr_num, 0)
	sleep (1)
	motor_turn_off(mtr_num)
	print "Finish program"
 
 
# Основная функция программы, в которой вызываются остальные функции.
def control():
	initialize_all()
	mtr_state = 0		# Инициализируем статус маховика
	hyro_state = 0 		# Инициализируем статус ДУС
	mag_state = 0 		# Инициализируем статус магнитометра
	alpha_goal = 90		# Целевой угол
	omega_goal = 0 		# Целевая угловая скорость
	mag_alpha = 0
 
	for i in range(200):
		#print "i = ", i
 
		# Опрос датчика угловой скорости и маховика.
		mag_state, magx_raw, magy_raw, magz_raw = magnetometer_request_raw(mag_num)
		hyro_state, gx_raw, gy_raw, gz_raw = hyro_request_raw(hyr_num) 
		mtr_state, mtr_speed = motor_request_speed(mtr_num)		
 
		if not mag_state: # если магнитометр вернул код ошибки 0, т.е. ошибки нет
			magx_cal, magy_cal, magz_cal = mag_calibrated(magx_raw,magy_raw,magz_raw)
			magy_cal = - magy_cal	# переходим из левой системы координат, которая изображена на магнитометре в правую
			mag_alpha = math.atan2(magy_cal, magx_cal)/math.pi*180
			#mag_alpha = angle_transformation(mag_alpha, alpha_goal)
			#print "magx_cal =", magx_cal, "magy_cal =", magy_cal, "magz_cal =", magz_cal # Вывод откалиброванных значений магнитометра
			print "mag_alpha atan2= ", mag_alpha
		elif mag_state == 1:
			print "Fail because of access error, check the connection"
		elif mag_state == 2:
			print "Fail because of interface error, check your code"
 
		# Обработка показаний датчика угловой скорости,
		# вычисление угловой скорости спутника по показаниям ДУС.
		# Если код ошибки ДУС равен 0, т.е. ошибки нет
		if not hyro_state:
			gx_degs = gx_raw * 0.00875
			gy_degs = gy_raw * 0.00875
			gz_degs = gz_raw * 0.00875
			# если ДУС установлен осью z вверх, то угловая скорость
			# спутника совпадает с показаниями ДУС по оси z, иначе
			# необходимо изменить знак: omega = - gz_degs
			omega = gz_degs
			#print "gx_degs =", gx_degs, "gy_degs =", gy_degs, "gz_degs =", gz_degs
		elif hyro_state == 1:
			print "Fail because of access error, check the connection"
		elif hyro_state == 2:
			print "Fail because of interface error, check your code"
 
		#Обработка показаний маховика и установка требуемой угловой скорости.
		if not mtr_state:	# если код ошибки 0, т.е. ошибки нет
			print "Motor_speed: ", mtr_speed
			# установка новой скорости маховика
			mtr_new_speed = motor_new_speed_PD(mtr_speed, mag_alpha, alpha_goal, omega, omega_goal)
			motor_set_speed(mtr_num, mtr_new_speed)
 
		sleep(time_step)
 
	switch_off_all()
